import Head from "next/head";
import styles from "../styles/Home.module.css";
import axios from "axios";
import React, { useState, useEffect } from "react";
import { signIn, signOut, useSession } from "next-auth/client";

export default function Home() {
  const [phantom, setPhantom] = useState();
  const [session] = useSession();

  useEffect(async () => {
    if (window.solana) {
      setPhantom(window.solana);
      await window.solana.connect();
    }
  }, []);

  const axiosInstance = axios.create({
    withCredentials: true,
  });

  async function fetchNonce() {
    const response = await axiosInstance.get(
      "http://localhost:3001/api/v1/users/nonce"
    );

    const { nonce } = await response.data;
    console.log(nonce);

    return nonce;
  }

  async function login() {
    const nonce = await fetchNonce();

    const message = `Sign this message to prove you are the owner of the connected wallet - nonce: ${nonce}`;
    const encodedMessage = new TextEncoder().encode(message);
    const signedMessage = await solana.request({
      method: "signMessage",
      params: {
        message: encodedMessage,
      },
    });
    const loginInstance = axios.create({
      withCredentials: true,
      headers: {
        Authorization:
          "Bearer" + `${signedMessage.publicKey}.${signedMessage.signature}`,
      },
    });
    const response = await axios.get(
      "http://localhost:3001/api/v1/users/login",
      {
        headers: {
          Authorization:
            "Bearer " + `${signedMessage.publicKey}.${signedMessage.signature}`,
        },
      }
    );
    console.log(`${signedMessage.publicKey}.${signedMessage.signature}`,response);
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {!phantom && (
          <p className={styles.description}>
            This sample requires Phantom Wallet
          </p>
        )}

        {phantom && !session && (
          <button onClick={login}>Login with Phantom</button>
        )}

        {phantom && session && (
          <>
            <p className={styles.description}> Welcome {session?.user?.name}</p>
            <button onClick={signOut}>Logout</button>
          </>
        )}
      </main>

      <footer className={styles.footer}></footer>
    </div>
  );
}
